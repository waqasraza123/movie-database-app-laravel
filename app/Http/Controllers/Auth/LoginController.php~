<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\AuthenticatesUsers;
use Illuminate\Http\Request;
use Auth;
use Socialite;
use App\User;
//use App\AdminUser;
class LoginController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Login Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles authenticating users for the application and
    | redirecting them to your home screen. The controller uses a trait
    | to conveniently provide its functionality to your applications.
    |
    */

    use AuthenticatesUsers;

    /**
     * Where to redirect users after login.
     *
     * @var string
     */
    protected $redirectTo = '/dashboard';

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('guest')->except('logout');
    }
    
    /**
     * Redirect the user to the OAuth Provider.
     *
     * @return Response
     */
    public function redirectToProvider($provider)
    {
        return Socialite::driver($provider)->redirect();
    }

    /**
     * Obtain the user information from provider.  Check if the user already exists in our
     * database by looking up their provider_id in the database.
     * If the user exists, log them in. Otherwise, create a new user then log them in. After that 
     * redirect them to the authenticated users homepage.
     *
     * @return Response
     */
    public function handleProviderCallback($provider)
    {
        $user = Socialite::driver($provider)->user();

        $authUser = $this->findOrCreateUser($user, $provider);
        Auth::login($authUser, true);
        return redirect($this->redirectTo);
    }
    
    /**
     * If a user has registered before using social auth, return the user
     * else, create a new user object.
     * @param  $user Socialite user object
     * @param $provider Social auth provider
     * @return  User
     */
    public function findOrCreateUser($user, $provider)
    {
        $authUser = User::where('provider_id', $user->id)->first();
        if ($authUser) {
            return $authUser;
        }
        return User::create([
            'name'     => $user->name,
            'email'    => $user->email,
            'provider' => $provider,
            'provider_id' => $user->id
        ]);
    }
    
    /**
    *
    *
    * Admin Login controlls
    *
    */
    public function authenticateAdminUser(Request $request){
    	$email = $request->input('email');
    	$password = $request->input('password');
    	
    	// hardcoded the admin credentials
    	$authUser = User::where('email', 'admin@moviesdatabase.com')->first();
    	if(!($authUser and $authUser == '0')){
    		User::create([
		        'name'     => 'admin',
		        'email'    => 'admin@moviesdatabase.com',
		        'password' => 'admin@123',
		        'type'     => 0
		    ]);
        }
        \Log::info('emailid:'.$email.' and password:'.$password);
        $authUser = User::where('email', $email)->first();
        \Log::info('LoginController: '.$authUser->email.' and '.$authUser->password);
    	if ($authUser->email == $email and $authUser->password == $password and $authUser->type== 0) {
            // Authentication passed...
            Auth::login($authUser,true);
            \Log::info('LoginController after Auth::login(): '.Auth::user());
            return redirect($this->redirectTo);
        }
        return redirect('/admin/login');
    }
    
    /**
     *
     *Logout out the session
     *
     */
     public function logout(Request $request) {
	  Auth::logout();
	  return redirect('/login');
	}
    
}
